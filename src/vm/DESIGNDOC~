		    +---------------------------+
		    |             OS            |
		    | PROJECT 3: VIRTUAL MEMORY |
		    |      DESIGN DOCUMENT      |
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Muhammad Sarmad Khan <s8mukhan@stud.uni-saarland.de>
Hamza Anwar <s8haanwa@stud.uni-saarland.de>


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
struct frame_table_entry
  {
    void *kvaddr;               /* kernel virtual address */
    void *uvaddr;               /* user virtual address (only needed for eviction) */
    struct hash_elem elem;      /* see frame_map */
    struct thread *t;           /* The associated thread. */
  };
This structure represents a frame in the frame_map.

static struct hash frame_map;
This structure is used to manage and store info of frames (frame entry).

static struct lock frame_lock;
A lock to ensure critical sections on frame operations. 


---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.
When a page fault occurs, after validating the fault address:
1) After rounding the fault address to the page start address, the user
virtaul address is looked up in the supplementary page table which contains
info about the data which should go into the table.
2) A frame is allocated for the page data. A page table entry is created
for the newly allocated frame. The data is then brough into the frame either
from the swap or filesys.
3) Info regarding the page is updated in supp page table (i.e. its location to
FRAME).

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?
This issue is avoided. The accesses and dirty bits are obtained from
the page directory which is local to every process. Only user virtual
addresses are used to get the bits, which is stored in the supp page table.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?
A lock frame_lock is used to prevent race conditions. Only one process
can execute the code to obtain a frame.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?
The supp page table is used to store info about the data which should
go into the page in case of a page fault.

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
static struct block *swap_block;
The block device for swap storage.

static struct lock swap_lock;
To snynchornize access to swap code.

static struct bitmap *swap_bitmap;
bitmap for availability of swap slots. 1: free. 0: taken. Each bit
represents a single sector.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.
We chose to use random eviction for frames. Priority for eviction is
given to the frames which are not dirty, so that they don't have to be
written to swap. If no clean page is found, a dirty page is written to
swap before being evicted.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?
We used the function pagedir_clear_page (uint32_t *pd, void *upage)
which marks the page as non-present, so that if Q accesses the frame
again, a page fault occurs which brings in the page again (by first
allocating a new frame).

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.
On a page fault, after 'validation' of the fault address, the faulting page
is looked up in the supp page table.
1)If this page is not already present in the supp page table and
2)The fault addr is greated that esp - 32 (we chose 32 since that's the max
it could be)
then this could be a stack access and the stack is extended. 

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
In threads/thread.h (in struct thread):

struct list mmap_list;  //mmaped pages in a thread

In userprog/process.h:

typedef int mmapid_t; //mapid

struct mmap_desc {
    mmapid_t id; //map id

    struct list_elem elem; 

    struct file* file; //mapped file

    void *addr;   // where it is mapped to? store the user virtual address

    size_t size;  // file size
};

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.
mmapped files are loaded like executable files,They are also loaded into physical memory
similarly. In munmap, the thread must iterate through its mmap_list and write dirty pages back to disk,
close the mmap-ed file also on process_exit all mmaped files are unmapped and deleted from the memory

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.
The file is mapped page by page to the address and in each page spt entry is 
added to the thread's hashtable if there is a duplicate hash entry then the most
recent mapping is mapped deleting the previous one.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.
Our implementation does share code. In the mmap syscall, we just add
this page in the supp page table and set its 'location' to FILE_SYS.
Now when a page fault occurs, the same demand paging code is used to
bring it memory.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

